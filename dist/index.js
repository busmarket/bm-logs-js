"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BmLogs = void 0;
const winston_1 = require("winston");
const moment_1 = __importDefault(require("moment"));
class BmLogs {
    constructor(options) {
        this._filename = null;
        this.customLogger = winston_1.createLogger({
            transports: this.initializeTransports(options)
        });
    }
    initializeTransports(options) {
        const consoleTransport = new winston_1.transports.Console();
        if (options && (options === null || options === void 0 ? void 0 : options.filename)) {
            const fileTransport = new winston_1.transports.File({
                filename: `${options === null || options === void 0 ? void 0 : options.filename}.log`
            });
            return [consoleTransport, fileTransport];
        }
        return consoleTransport;
    }
    log(params) {
        if (!params) {
            console.error('Required parameters are missing');
            return;
        }
        const option = Object.assign({ level: params.severity || '', timestamp: `${moment_1.default().format()}` }, (params));
        this.customLogger.log(option);
    }
}
exports.BmLogs = BmLogs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EscUNBQXlEO0FBQ3pELG9EQUE0QjtBQVE1QixNQUFhLE1BQU07SUFhZixZQUFZLE9BQTZCO1FBUHhCLGNBQVMsR0FBa0IsSUFBSSxDQUFDO1FBUTdDLElBQUksQ0FBQyxZQUFZLEdBQUcsc0JBQVksQ0FBQztZQUM3QixVQUFVLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztTQUNqRCxDQUFDLENBQUM7SUFDUCxDQUFDO0lBU08sb0JBQW9CLENBQUMsT0FBNkI7UUFFdEQsTUFBTSxnQkFBZ0IsR0FBYyxJQUFJLG9CQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7UUFHN0QsSUFBSSxPQUFPLEtBQUksT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFFBQVEsQ0FBQSxFQUFFO1lBQzlCLE1BQU0sYUFBYSxHQUFjLElBQUksb0JBQVUsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELFFBQVEsRUFBRSxHQUFHLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxRQUFRLE1BQU07YUFDdkMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFFLGdCQUFnQixFQUFFLGFBQWEsQ0FBRSxDQUFBO1NBQzdDO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQTtJQUMzQixDQUFDO0lBT0QsR0FBRyxDQUFDLE1BQWU7UUFDZixJQUFJLENBQUMsTUFBTSxFQUFHO1lBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO1lBQ2hELE9BQU07U0FDVDtRQU1ELE1BQU0sTUFBTSxtQkFDUixLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQzVCLFNBQVMsRUFBRSxHQUFHLGdCQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUM5QixDQUFDLE1BQU0sQ0FBQyxDQUNkLENBQUM7UUFFRixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFhLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0NBQ0o7QUFoRUQsd0JBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJub2RlXCIgLz5cbmltcG9ydCB7dHJhbnNwb3J0cywgY3JlYXRlTG9nZ2VyLCBMb2dnZXJ9IGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtGaWVsZHNJfSBmcm9tIFwiLi4vQHR5cGVzL2JtLWxvZ3NcIjtcbmltcG9ydCAqIGFzIFRyYW5zcG9ydCBmcm9tIFwid2luc3Rvbi10cmFuc3BvcnRcIjtcblxuLyoqXG4gKiBAbmFtZSBCbUxvZ3NcbiAqIEBkZXNjcmlwdGlvbiBpbnN0YW5jZSBtb2R1bGVcbiAqL1xuZXhwb3J0IGNsYXNzIEJtTG9ncyB7XG4gICAgLyoqXG4gICAgICogQG5hbWUgX2ZpbGVuYW1lXG4gICAgICogQGRlc2NyaXB0aW9uIGluaXRpYWwgZmlsZSBuYW1lXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9maWxlbmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gaW5pdGlhbGl6ZSBMb2dnZXIgaW5zdGFuY2VcbiAgICAgKi9cbiAgICByZWFkb25seSBjdXN0b21Mb2dnZXI6IExvZ2dlcjtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiB7ZmlsZW5hbWU/OiBzdHJpbmd9KSB7XG4gICAgICAgIHRoaXMuY3VzdG9tTG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcbiAgICAgICAgICAgIHRyYW5zcG9ydHM6IHRoaXMuaW5pdGlhbGl6ZVRyYW5zcG9ydHMob3B0aW9ucylcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5pdGlhbGl6ZVRyYW5zcG9ydHNcbiAgICAgKiBAaW5pdGlhbGl6ZSB0cmFuc3BvcnQgaW50ZXJmYWNlXG4gICAgICogQHBhcmFtIHtmaWxlbmFtZT86IHN0cmluZ30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gVHJhbnNwb3J0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRpYWxpemVUcmFuc3BvcnRzKG9wdGlvbnM/OiB7ZmlsZW5hbWU/OiBzdHJpbmd9KTogVHJhbnNwb3J0W10gfCBUcmFuc3BvcnQge1xuICAgICAgICAvLyB0cmFuc3BvcnQgaW50ZXJmYWNlIGZvciBjb25zb2xlXG4gICAgICAgIGNvbnN0IGNvbnNvbGVUcmFuc3BvcnQ6IFRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoKTtcblxuICAgICAgICAvLyB0cmFuc3BvcnQgaW50ZXJmYWNlIGZvciB3cml0aW5nIGluIGZpbGVcbiAgICAgICAgaWYoIG9wdGlvbnMgJiYgb3B0aW9ucz8uZmlsZW5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVUcmFuc3BvcnQ6IFRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzLkZpbGUoe1xuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBgJHtvcHRpb25zPy5maWxlbmFtZX0ubG9nYFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gWyBjb25zb2xlVHJhbnNwb3J0LCBmaWxlVHJhbnNwb3J0IF1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25zb2xlVHJhbnNwb3J0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5hbWUgbG9nXG4gICAgICogQHBhcmFtIHtGaWVsZHNJfSBwYXJhbXNcbiAgICAgKiBAZGVzY3JpcHRpb24gcnVuIHByb2Nlc3Npbmcgb2Ygd3JpdGUgbG9nZ2VyXG4gICAgICovXG4gICAgbG9nKHBhcmFtczogRmllbGRzSSkge1xuICAgICAgICBpZiggIXBhcmFtcyApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlcXVpcmVkIHBhcmFtZXRlcnMgYXJlIG1pc3NpbmcnKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5hbWUge0ZpZWxkc0l9IG9wdGlvblxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gaW5pdGlhbGl6ZSBjdXJyZW50IGxpc3Qgb2Ygb3B0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgY29uc3Qgb3B0aW9uOiBGaWVsZHNJID0ge1xuICAgICAgICAgICAgbGV2ZWw6IHBhcmFtcy5zZXZlcml0eSB8fCAnJyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogYCR7bW9tZW50KCkuZm9ybWF0KCl9YCxcbiAgICAgICAgICAgIC4uLihwYXJhbXMpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jdXN0b21Mb2dnZXIubG9nKG9wdGlvbiBhcyBhbnkpXG4gICAgfVxufVxuIl19